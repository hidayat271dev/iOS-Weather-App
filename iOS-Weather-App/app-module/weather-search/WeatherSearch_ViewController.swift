//
//  WeatherSearch_ViewController.swift
//  iOS-Weather-App
//
//  Created Bridgetech on 28/09/18.
//  Copyright © 2018 Bridgetech. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Material
import MapKit

class WeatherSearch_ViewController: UIViewController, WeatherSearch_ViewProtocol {

	var presenter: WeatherSearch_PresenterProtocol?
    fileprivate var weatherData:WeatherForcast?
    
    @IBOutlet weak var mapViewKit: MKMapView!
    @IBOutlet weak var forecastTable: UITableView!
    @IBOutlet weak var dateWeatherLabel: UILabel!
    @IBOutlet weak var temperaturWeatherLabel: UILabel!
    @IBOutlet weak var locationWeatherLabel: UILabel!
    
	override func viewDidLoad() {
        super.viewDidLoad()
        
        presenter?.startFetchingWeather(query: "Jakarta")
        
        prepareSearchBar()
        
        forecastTable.delegate = self
        forecastTable.dataSource = self
    }

}

extension WeatherSearch_ViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // return 7
        if let data = self.weatherData?.forecast.forecastday { return data.count
        } else {
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! Homepage_Cell
        
        if let data = self.weatherData?.forecast.forecastday {
            let temp = data[indexPath.row]
            
            cell.dateLabel.text = temp.date
            cell.weatherStatusLabel.text =  temp.day.condition.text
            cell.weatherImage.sd_setImage(with: URL(string: "https:" + temp.day.condition.icon), placeholderImage: UIImage(named: "no_image_placeholder"))
            cell.weatherTemperatureLabel.text =  String(format:"%.2f", temp.day.avgtemp_c) + "° C"
            cell.weatherTemperatureMaxLabel.text = String(format:"%.2f", temp.day.maxtemp_c) + "° C"
            cell.weatherTemperatureMinLabel.text = String(format:"%.2f", temp.day.mintemp_c) + "° C"
            cell.dayLabel.text = getDayOfWeek(temp.date)
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
}

extension WeatherSearch_ViewController: SearchBarDelegate{
    internal func prepareSearchBar() {
        // Access the searchBar.
        guard let searchBar = searchBarController?.searchBar else {
            return
        }
        
        searchBar.delegate = self
    }
    
    func searchBar(searchBar: SearchBar, didClear textField: UITextField, with text: String?) {
        print("clear")
    }
    
    func searchBar(searchBar: SearchBar, didChange textField: UITextField, with text: String?) {
        
        guard let searching = text, (text?.count)! > 5 else{
            return
        }
        
        presenter?.startFetchingWeather(query: searching)
        
    }
}

extension WeatherSearch_ViewController{
    
    func showWeather(weatherForcast: WeatherForcast) {
        self.weatherData = weatherForcast
        self.forecastTable.reloadData()
        self.dateWeatherLabel.text = weatherForcast.location.localtime
        self.temperaturWeatherLabel.text = String(format:"%.2f", weatherForcast.current.temp_c) + "° C"
        self.locationWeatherLabel.text = weatherForcast.location.name + "\n" + weatherForcast.location.region + ", " + weatherForcast.location.country
        // hideProgressIndicator(view: self.view)
        let center = CLLocationCoordinate2D(latitude: weatherForcast.location.lat, longitude: weatherForcast.location.lon)
        let region = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 0.02, longitudeDelta: 0.02))
        
        mapViewKit.setRegion(region, animated: true)
        
    }
    
    func showError() {
        // hideProgressIndicator(view: self.view)
        let alert = UIAlertController(title: "Alert", message: "Problem Fetching Data", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Okay", style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    func getDayOfWeek(_ today:String) -> String? {
        let day = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
        let formatter  = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        guard let todayDate = formatter.date(from: today) else { return nil }
        let myCalendar = Calendar(identifier: .gregorian)
        let weekDay = myCalendar.component(.weekday, from: todayDate)
        return day[weekDay-1]
    }
}
